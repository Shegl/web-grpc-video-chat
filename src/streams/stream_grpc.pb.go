// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: stream.proto

package streams

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Stream_StreamState_FullMethodName = "/Stream/StreamState"
	Stream_AVStream_FullMethodName    = "/Stream/AVStream"
)

// StreamClient is the client API for Stream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamClient interface {
	StreamState(ctx context.Context, opts ...grpc.CallOption) (Stream_StreamStateClient, error)
	AVStream(ctx context.Context, opts ...grpc.CallOption) (Stream_AVStreamClient, error)
}

type streamClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamClient(cc grpc.ClientConnInterface) StreamClient {
	return &streamClient{cc}
}

func (c *streamClient) StreamState(ctx context.Context, opts ...grpc.CallOption) (Stream_StreamStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Stream_ServiceDesc.Streams[0], Stream_StreamState_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamStreamStateClient{stream}
	return x, nil
}

type Stream_StreamStateClient interface {
	Send(*User) error
	Recv() (*StateMessage, error)
	grpc.ClientStream
}

type streamStreamStateClient struct {
	grpc.ClientStream
}

func (x *streamStreamStateClient) Send(m *User) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamStreamStateClient) Recv() (*StateMessage, error) {
	m := new(StateMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamClient) AVStream(ctx context.Context, opts ...grpc.CallOption) (Stream_AVStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Stream_ServiceDesc.Streams[1], Stream_AVStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamAVStreamClient{stream}
	return x, nil
}

type Stream_AVStreamClient interface {
	Send(*AVFrameData) error
	Recv() (*AVFrameData, error)
	grpc.ClientStream
}

type streamAVStreamClient struct {
	grpc.ClientStream
}

func (x *streamAVStreamClient) Send(m *AVFrameData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamAVStreamClient) Recv() (*AVFrameData, error) {
	m := new(AVFrameData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamServer is the server API for Stream service.
// All implementations must embed UnimplementedStreamServer
// for forward compatibility
type StreamServer interface {
	StreamState(Stream_StreamStateServer) error
	AVStream(Stream_AVStreamServer) error
	mustEmbedUnimplementedStreamServer()
}

// UnimplementedStreamServer must be embedded to have forward compatible implementations.
type UnimplementedStreamServer struct {
}

func (UnimplementedStreamServer) StreamState(Stream_StreamStateServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamState not implemented")
}
func (UnimplementedStreamServer) AVStream(Stream_AVStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AVStream not implemented")
}
func (UnimplementedStreamServer) mustEmbedUnimplementedStreamServer() {}

// UnsafeStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamServer will
// result in compilation errors.
type UnsafeStreamServer interface {
	mustEmbedUnimplementedStreamServer()
}

func RegisterStreamServer(s grpc.ServiceRegistrar, srv StreamServer) {
	s.RegisterService(&Stream_ServiceDesc, srv)
}

func _Stream_StreamState_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServer).StreamState(&streamStreamStateServer{stream})
}

type Stream_StreamStateServer interface {
	Send(*StateMessage) error
	Recv() (*User, error)
	grpc.ServerStream
}

type streamStreamStateServer struct {
	grpc.ServerStream
}

func (x *streamStreamStateServer) Send(m *StateMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamStreamStateServer) Recv() (*User, error) {
	m := new(User)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Stream_AVStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServer).AVStream(&streamAVStreamServer{stream})
}

type Stream_AVStreamServer interface {
	Send(*AVFrameData) error
	Recv() (*AVFrameData, error)
	grpc.ServerStream
}

type streamAVStreamServer struct {
	grpc.ServerStream
}

func (x *streamAVStreamServer) Send(m *AVFrameData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamAVStreamServer) Recv() (*AVFrameData, error) {
	m := new(AVFrameData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Stream_ServiceDesc is the grpc.ServiceDesc for Stream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Stream",
	HandlerType: (*StreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamState",
			Handler:       _Stream_StreamState_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AVStream",
			Handler:       _Stream_AVStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream.proto",
}

// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "chat.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Empty
 */
export interface Empty {
}
/**
 * @generated from protobuf message AuthRequest
 */
export interface AuthRequest {
    /**
     * @generated from protobuf field: string UUID = 1 [json_name = "UUID"];
     */
    uUID: string;
    /**
     * @generated from protobuf field: string ChatUUID = 2 [json_name = "ChatUUID"];
     */
    chatUUID: string;
}
/**
 * @generated from protobuf message SendMessageRequest
 */
export interface SendMessageRequest {
    /**
     * @generated from protobuf field: string Msg = 1 [json_name = "Msg"];
     */
    msg: string;
    /**
     * @generated from protobuf field: AuthRequest AuthData = 2 [json_name = "AuthData"];
     */
    authData?: AuthRequest;
}
/**
 * @generated from protobuf message ChatMessage
 */
export interface ChatMessage {
    /**
     * @generated from protobuf field: string UUID = 1 [json_name = "UUID"];
     */
    uUID: string;
    /**
     * @generated from protobuf field: string UserUUID = 2 [json_name = "UserUUID"];
     */
    userUUID: string;
    /**
     * @generated from protobuf field: string UserName = 3 [json_name = "UserName"];
     */
    userName: string;
    /**
     * @generated from protobuf field: int64 Time = 4 [json_name = "Time"];
     */
    time: bigint;
    /**
     * @generated from protobuf field: string Msg = 5 [json_name = "Msg"];
     */
    msg: string;
}
/**
 * @generated from protobuf message HistoryResponse
 */
export interface HistoryResponse {
    /**
     * @generated from protobuf field: repeated ChatMessage Messages = 1 [json_name = "Messages"];
     */
    messages: ChatMessage[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Empty$Type extends MessageType<Empty> {
    constructor() {
        super("Empty", []);
    }
    create(value?: PartialMessage<Empty>): Empty {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Empty>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Empty): Empty {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Empty, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Empty
 */
export const Empty = new Empty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthRequest$Type extends MessageType<AuthRequest> {
    constructor() {
        super("AuthRequest", [
            { no: 1, name: "UUID", kind: "scalar", jsonName: "UUID", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ChatUUID", kind: "scalar", jsonName: "ChatUUID", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AuthRequest>): AuthRequest {
        const message = { uUID: "", chatUUID: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuthRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthRequest): AuthRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string UUID = 1 [json_name = "UUID"];*/ 1:
                    message.uUID = reader.string();
                    break;
                case /* string ChatUUID = 2 [json_name = "ChatUUID"];*/ 2:
                    message.chatUUID = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string UUID = 1 [json_name = "UUID"]; */
        if (message.uUID !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uUID);
        /* string ChatUUID = 2 [json_name = "ChatUUID"]; */
        if (message.chatUUID !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chatUUID);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AuthRequest
 */
export const AuthRequest = new AuthRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendMessageRequest$Type extends MessageType<SendMessageRequest> {
    constructor() {
        super("SendMessageRequest", [
            { no: 1, name: "Msg", kind: "scalar", jsonName: "Msg", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "AuthData", kind: "message", jsonName: "AuthData", T: () => AuthRequest }
        ]);
    }
    create(value?: PartialMessage<SendMessageRequest>): SendMessageRequest {
        const message = { msg: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SendMessageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendMessageRequest): SendMessageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Msg = 1 [json_name = "Msg"];*/ 1:
                    message.msg = reader.string();
                    break;
                case /* AuthRequest AuthData = 2 [json_name = "AuthData"];*/ 2:
                    message.authData = AuthRequest.internalBinaryRead(reader, reader.uint32(), options, message.authData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendMessageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Msg = 1 [json_name = "Msg"]; */
        if (message.msg !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.msg);
        /* AuthRequest AuthData = 2 [json_name = "AuthData"]; */
        if (message.authData)
            AuthRequest.internalBinaryWrite(message.authData, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SendMessageRequest
 */
export const SendMessageRequest = new SendMessageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatMessage$Type extends MessageType<ChatMessage> {
    constructor() {
        super("ChatMessage", [
            { no: 1, name: "UUID", kind: "scalar", jsonName: "UUID", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "UserUUID", kind: "scalar", jsonName: "UserUUID", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "UserName", kind: "scalar", jsonName: "UserName", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "Time", kind: "scalar", jsonName: "Time", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "Msg", kind: "scalar", jsonName: "Msg", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChatMessage>): ChatMessage {
        const message = { uUID: "", userUUID: "", userName: "", time: 0n, msg: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatMessage): ChatMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string UUID = 1 [json_name = "UUID"];*/ 1:
                    message.uUID = reader.string();
                    break;
                case /* string UserUUID = 2 [json_name = "UserUUID"];*/ 2:
                    message.userUUID = reader.string();
                    break;
                case /* string UserName = 3 [json_name = "UserName"];*/ 3:
                    message.userName = reader.string();
                    break;
                case /* int64 Time = 4 [json_name = "Time"];*/ 4:
                    message.time = reader.int64().toBigInt();
                    break;
                case /* string Msg = 5 [json_name = "Msg"];*/ 5:
                    message.msg = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string UUID = 1 [json_name = "UUID"]; */
        if (message.uUID !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uUID);
        /* string UserUUID = 2 [json_name = "UserUUID"]; */
        if (message.userUUID !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userUUID);
        /* string UserName = 3 [json_name = "UserName"]; */
        if (message.userName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.userName);
        /* int64 Time = 4 [json_name = "Time"]; */
        if (message.time !== 0n)
            writer.tag(4, WireType.Varint).int64(message.time);
        /* string Msg = 5 [json_name = "Msg"]; */
        if (message.msg !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.msg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatMessage
 */
export const ChatMessage = new ChatMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HistoryResponse$Type extends MessageType<HistoryResponse> {
    constructor() {
        super("HistoryResponse", [
            { no: 1, name: "Messages", kind: "message", jsonName: "Messages", repeat: 1 /*RepeatType.PACKED*/, T: () => ChatMessage }
        ]);
    }
    create(value?: PartialMessage<HistoryResponse>): HistoryResponse {
        const message = { messages: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HistoryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HistoryResponse): HistoryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ChatMessage Messages = 1 [json_name = "Messages"];*/ 1:
                    message.messages.push(ChatMessage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HistoryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ChatMessage Messages = 1 [json_name = "Messages"]; */
        for (let i = 0; i < message.messages.length; i++)
            ChatMessage.internalBinaryWrite(message.messages[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message HistoryResponse
 */
export const HistoryResponse = new HistoryResponse$Type();
/**
 * @generated ServiceType for protobuf service Chat
 */
export const Chat = new ServiceType("Chat", [
    { name: "GetHistory", options: {}, I: AuthRequest, O: HistoryResponse },
    { name: "SendMessage", options: {}, I: SendMessageRequest, O: Empty },
    { name: "Listen", serverStreaming: true, options: {}, I: AuthRequest, O: ChatMessage }
]);

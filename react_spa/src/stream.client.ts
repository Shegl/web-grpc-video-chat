// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "stream.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Stream } from "./stream";
import type { AVFrameData } from "./stream";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { StateMessage } from "./stream";
import type { User } from "./stream";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service Stream
 */
export interface IStreamClient {
    /**
     * @generated from protobuf rpc: StreamState(stream User) returns (stream StateMessage);
     */
    streamState(options?: RpcOptions): DuplexStreamingCall<User, StateMessage>;
    /**
     * @generated from protobuf rpc: AVStream(stream AVFrameData) returns (stream AVFrameData);
     */
    aVStream(options?: RpcOptions): DuplexStreamingCall<AVFrameData, AVFrameData>;
}
/**
 * @generated from protobuf service Stream
 */
export class StreamClient implements IStreamClient, ServiceInfo {
    typeName = Stream.typeName;
    methods = Stream.methods;
    options = Stream.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: StreamState(stream User) returns (stream StateMessage);
     */
    streamState(options?: RpcOptions): DuplexStreamingCall<User, StateMessage> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<User, StateMessage>("duplex", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: AVStream(stream AVFrameData) returns (stream AVFrameData);
     */
    aVStream(options?: RpcOptions): DuplexStreamingCall<AVFrameData, AVFrameData> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<AVFrameData, AVFrameData>("duplex", this._transport, method, opt);
    }
}

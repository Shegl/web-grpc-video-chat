// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "stream.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Stream } from "./stream";
import type { AVFrameData } from "./stream";
import type { Ack } from "./stream";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { StateMessage } from "./stream";
import type { User } from "./stream";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service Stream
 */
export interface IStreamClient {
    /**
     * @generated from protobuf rpc: StreamState(User) returns (stream StateMessage);
     */
    streamState(input: User, options?: RpcOptions): ServerStreamingCall<User, StateMessage>;
    /**
     * @generated from protobuf rpc: ChangeState(User) returns (Ack);
     */
    changeState(input: User, options?: RpcOptions): UnaryCall<User, Ack>;
    /**
     * @generated from protobuf rpc: AVStream(User) returns (stream AVFrameData);
     */
    aVStream(input: User, options?: RpcOptions): ServerStreamingCall<User, AVFrameData>;
}
/**
 * @generated from protobuf service Stream
 */
export class StreamClient implements IStreamClient, ServiceInfo {
    typeName = Stream.typeName;
    methods = Stream.methods;
    options = Stream.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: StreamState(User) returns (stream StateMessage);
     */
    streamState(input: User, options?: RpcOptions): ServerStreamingCall<User, StateMessage> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<User, StateMessage>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ChangeState(User) returns (Ack);
     */
    changeState(input: User, options?: RpcOptions): UnaryCall<User, Ack> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<User, Ack>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AVStream(User) returns (stream AVFrameData);
     */
    aVStream(input: User, options?: RpcOptions): ServerStreamingCall<User, AVFrameData> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<User, AVFrameData>("serverStreaming", this._transport, method, opt, input);
    }
}
